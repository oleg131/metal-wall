{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CORS_HOST","process","THUMBNAIL_SIZE","Header","className","Home","useState","items","setItems","start","setStart","hasMore","sethasMore","fetchData","displayStart","today","moment","month","year","fromMonth","toYear","toMonth","url","replace","console","log","fetch","then","res","json","data","aaData","length","map","processData","filter","a","date","format","sort","b","reverse","concat","n_load","Math","floor","window","innerWidth","ceil","innerHeight","iTotalRecords","m","match","el0","document","createElement","innerHTML","artist","getElementsByTagName","innerText","el1","album","getAttribute","id","split","pop","cover","useEffect","role","dataLength","next","loader","endMessage","item","index","Album","key","setClassName","width","setWidth","handleResize","addEventListener","removeEventListener","useWindowWidth","style","height","href","target","rel","src","fallbackImage","Empty","onLoad","App","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.30bdfa00.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport ReactImageFallback from \"react-image-fallback\";\nimport moment from 'moment';\n\nimport './App.css';\n\nconst CORS_HOST = process.env.REACT_APP_CORS_HOST || 'http://localhost:8080/'\nconst THUMBNAIL_SIZE = 120;\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Home />\n    </div>\n  );\n}\n\nfunction Header() {\n  return (\n    <div className=\"text-center my-5\">\n      <h2 className=\"header\">\n        Wall of latest metal releases. Powered by Metal Archives, YouTube and React.\n      </h2>\n    </div>\n  )\n}\n\nfunction Home() {\n  const [items, setItems] = useState([]);\n  const [start, setStart] = useState(null);\n  const [hasMore, sethasMore] = useState(true);\n  \n  useEffect(() => {\n    fetchData(start);\n  }, [])\n  \n  function fetchData(displayStart) {\n    const today = moment();\n\n    const month = today.month() + 1;\n    const year = today.year();\n\n    const displayLength = 200;\n\n    const [fromYear, fromMonth, toYear, toMonth] = [year - 1, month, year, month];\n\n    const url = CORS_HOST + `https://www.metal-archives.com/search\n    /ajax-advanced/searching/albums/?bandName=&releaseTitle=\n    &releaseYearFrom=${fromYear}&releaseMonthFrom=${fromMonth}\n    &releaseYearTo=${toYear}&releaseMonthTo=${toMonth}\n    &country=&location=&releaseLabelName=&releaseCatalogNumber=&releaseIdentifiers=\n    &releaseRecordingInfo=&releaseDescription=&releaseNotes=&genre=&releaseType[]=1\n    &sEcho=1&iColumns=3&sColumns=&iDisplayStart=DISPLAYSTART\n    &iDisplayLength=${displayLength}`.replace(/\\n/g, '').replace(/ /g, '')\n\n    if (!displayStart) {\n      console.log('fetch initial')\n\n      fetch(url.replace('DISPLAYSTART', 0))\n        .then(res => res.json())\n        .then(function(data) {\n          fetchData(data.iTotalRecords - displayLength)\n        })\n    } else {\n      console.log('fetch with start', displayStart)\n\n      fetch(url.replace('DISPLAYSTART', displayStart))\n        .then(res => res.json())\n        .then(function(data) {\n          setStart(displayStart - displayLength);\n\n          if (data.aaData.length === 0) {\n            sethasMore(false);\n            return\n          }\n\n          data = data.aaData.map(processData).filter(a => !!a);\n          data = data.filter(a => a.date <= moment().format(\"YYYY-MM-DD\"));\n          data.sort((a, b) => a.date < b.date).reverse();\n\n          data = items.concat(data);\n\n          setItems(data); \n          console.log('fetched', data.length)\n\n          // Load enough items for infinite scrolling to work\n          const n_col = Math.floor(window.innerWidth / THUMBNAIL_SIZE);\n          const n_row = Math.ceil(2 * window.innerHeight / THUMBNAIL_SIZE);\n          const n_load = n_col * n_row;\n          if (data.length < n_load) {\n            fetchData(displayStart - displayLength)\n          }\n        })\n    }\n  }\n\n  function processData(data) {\n    const m = data[2].match('<!-- (.+) -->');\n    if (!m) {\n      return null\n    }\n    const date = m[1];\n\n    const el0 = document.createElement('html');\n    el0.innerHTML = data[0];\n    const artist = el0.getElementsByTagName('a')[0].innerText;\n\n    const el1 = document.createElement('html');\n    el1.innerHTML = data[1];\n    const album = el1.getElementsByTagName('a')[0].innerText;\n\n    const as = el1.getElementsByTagName('a');\n    const url = as[0].getAttribute('href');\n    const id = url.split('/').pop();\n    const cover = `https://www.metal-archives.com/images/${id[0]}/${id[1]}/${id[2]}/${id[3]}/${id}.`\n\n    return {\n      url, id, cover, date, artist, album\n    }\n  }\n\n  return (\n    <main role=\"main\" className=\"container-fluid text-center px-0\">      \n      <InfiniteScroll\n        dataLength={items.length} //This is important field to render the next data\n        next={() => fetchData(start)}\n        hasMore={hasMore}\n        loader=\"Loading\"\n        endMessage=\"The End (These are albums for the past year. Enjoy!)\"\n      >\n          <div className=\"text-center\">\n            {\n              items.map(\n                (item, index) => (\n                  <Album data={item} key={index} />\n                )\n              )\n            }\n          </div>\n\n      </InfiniteScroll>\n    </main>\n  );\n}\n\nfunction Album({ data }) {\n  const [className, setClassName] = useState(\"thumbnail zoom\");\n  const width = useWindowWidth();\n\n  function useWindowWidth() {\n    const [width, setWidth] = useState(window.innerWidth);\n    \n    useEffect(() => {\n      const handleResize = () => setWidth(window.innerWidth);\n      window.addEventListener('resize', handleResize);\n      return () => {\n        window.removeEventListener('resize', handleResize);\n      };\n    });\n    \n    return width / (Math.floor(width / THUMBNAIL_SIZE));\n  }\n  \n  return (\n    <div className={className} style={{width: width, height: width}}>\n      <a \n        href={\"https://www.youtube.com/results?search_query=\" + data.artist + \" \" + data.album} \n        target=\"_blank\" rel=\"noopener noreferrer\">\n        <ReactImageFallback\n          src={data.cover + 'jpg'}\n          fallbackImage={[\n            data.cover + 'jpeg', \n            <Empty onLoad={ () => setClassName(className + ' empty') } />\n          ]}\n          className=\"thumbnail-image\"\n        />\n      </a>\n    </div>\n  )\n}\n\nfunction Empty({ onLoad }) {\n  useEffect(onLoad)\n  return (\n    <Fragment />\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}